{"version":3,"sources":["grid/generator.js","grid/renderers/rendererTypeNames.js","grid/renderers/vanillaFunctionRenderer.js","grid/renderers/ReactClassRenderer.js","grid/renderers/ReactFunctionRenderer.js","grid/TypeChoice.js","grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["generateColumnsAndRows","columnsPerTypeCount","rowsCount","columnDefs","rowData","i","push","field","headerName","cellRenderer","hide","r","row","id","c","text","vanillaFunctionRenderer","params","value","ReactClassRenderer","this","props","Component","ReactFunctionRenderer","TypeChoice","className","type","name","onChange","checked","Grid","setColumnsVisiblity","rendererType","allColumns","gridColumnApi","getAllColumns","columnsToHide","filter","colDef","columnsToShow","undefined","setColumnsVisible","handleGridReady","gridApi","api","columnApi","handleRenererTypeChange","event","setState","chosenRendererType","target","state","gridOptions","defaultColDef","width","components","VANILLA_FUNCTION","frameworkComponents","REACT_CLASS","REACT_FUNCTION","onGridReady","console","log","App","href","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d469353.chunk.js","sourcesContent":["import {\r\n    VANILLA_FUNCTION,\r\n    REACT_CLASS,\r\n    REACT_FUNCTION\r\n} from './renderers/rendererTypeNames';\r\n\r\nconst generateColumnsAndRows = (columnsPerTypeCount, rowsCount) => {\r\n    const columnDefs = [];\r\n    const rowData = []\r\n\r\n    for (let i = 0; i < columnsPerTypeCount; i++) {\r\n        columnDefs.push({\r\n            field: 'field_' + i,\r\n            headerName: 'Col ' + i\r\n        }, {\r\n            field: 'field_vf_' + i,\r\n            headerName: 'Col VF ' + i,\r\n            cellRenderer: VANILLA_FUNCTION,\r\n            hide: true\r\n        }, {\r\n            field: 'field_rc_' + i,\r\n            headerName: 'Col RC ' + i,\r\n            cellRenderer: REACT_CLASS,\r\n            hide: true\r\n        }, {\r\n            field: 'field_rf_' + i,\r\n            headerName: 'Col RF ' + i,\r\n            cellRenderer: REACT_FUNCTION,\r\n            hide: true\r\n        });\r\n    }\r\n\r\n    for (let r = 0; r < rowsCount; r++) {\r\n        const row = { id: r };\r\n\r\n        for (let c = 0; c < columnsPerTypeCount; c++) {\r\n            const text = `(${r}, ${c})`;\r\n            row['field_' + c] = text;\r\n            row['field_vf_' + c] = text;\r\n            row['field_rc_' + c] = text;\r\n            row['field_rf_' + c] = text;\r\n        }\r\n\r\n        rowData.push(row);\r\n    }\r\n\r\n    return [columnDefs, rowData];\r\n}\r\n\r\nexport default generateColumnsAndRows;\r\n","export const NO_RENDERER = 'NO_RENDERER';\r\nexport const VANILLA_FUNCTION = 'VANILLA_FUNCTION';\r\nexport const REACT_CLASS = 'REACT_CLASS';\r\nexport const REACT_FUNCTION = 'REACT_FUNCTION';","export default function vanillaFunctionRenderer(params) {\r\n    return `<span>VF: ${params.value}</span>`;\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ReactClassRenderer extends Component {\r\n    render() {        \r\n        return (\r\n            <span>RC: {this.props.value}</span>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function ReactFunctionRenderer(props) {    \r\n    return (\r\n        <span>RF: {props.value}</span>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport {\r\n    NO_RENDERER,\r\n    VANILLA_FUNCTION,\r\n    REACT_CLASS,\r\n    REACT_FUNCTION\r\n} from './renderers/rendererTypeNames';\r\n\r\nconst TypeChoice = props => {\r\n    return (\r\n        <div className=\"TypeChoice\">\r\n            <span>Cell renderer type:</span>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value={NO_RENDERER}\r\n                    onChange={props.onChange} checked={props.type === NO_RENDERER} />\r\n                Not set\r\n             </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value={VANILLA_FUNCTION}\r\n                    onChange={props.onChange} checked={props.type === VANILLA_FUNCTION} />\r\n                Vanilla JS function\r\n            </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value={REACT_CLASS}\r\n                    onChange={props.onChange} checked={props.type === REACT_CLASS} />\r\n                React class component\r\n            </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value={REACT_FUNCTION}\r\n                    onChange={props.onChange} checked={props.type === REACT_FUNCTION} />\r\n                React function component\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypeChoice;","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nimport {\r\n    NO_RENDERER,\r\n} from './renderers/rendererTypeNames';\r\n\r\nimport generateColumnsAndRows from './generator';\r\n\r\nimport vanillaFunctionRenderer from './renderers/vanillaFunctionRenderer';\r\nimport ReactClassRenderer from './renderers/ReactClassRenderer';\r\nimport ReactFunctionRenderer from './renderers/ReactFunctionRenderer';\r\n\r\nimport TypeChoice from './TypeChoice';\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const [columnDefs, rowData] = generateColumnsAndRows(100, 100);\r\n\r\n        this.state = {\r\n            gridOptions: {\r\n                defaultColDef: {\r\n                    width: 90\r\n                },\r\n                columnDefs,\r\n                rowData,\r\n                components: {\r\n                    VANILLA_FUNCTION: vanillaFunctionRenderer\r\n                },\r\n                frameworkComponents: {\r\n                    REACT_CLASS: ReactClassRenderer,\r\n                    REACT_FUNCTION: ReactFunctionRenderer\r\n                },\r\n                onGridReady: this.handleGridReady\r\n            },\r\n            chosenRendererType: NO_RENDERER\r\n        }\r\n    }\r\n\r\n    setColumnsVisiblity = rendererType => {\r\n        const allColumns = this.gridColumnApi.getAllColumns();\r\n\r\n        const columnsToHide = allColumns.filter(c => c.colDef.cellRenderer !== rendererType);\r\n        const columnsToShow = rendererType === NO_RENDERER ?\r\n            allColumns.filter(c => c.colDef.cellRenderer === undefined) :\r\n            allColumns.filter(c => c.colDef.cellRenderer === rendererType);\r\n\r\n        this.gridColumnApi.setColumnsVisible(columnsToHide, false);\r\n        this.gridColumnApi.setColumnsVisible(columnsToShow, true);\r\n    };\r\n\r\n    handleGridReady = params => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n    };\r\n\r\n    handleRenererTypeChange = event => {\r\n        this.setState({\r\n            chosenRendererType: event.target.value\r\n        });\r\n\r\n        this.setColumnsVisiblity(event.target.value);\r\n    };\r\n\r\n    render() {\r\n        console.log('render');\r\n        return (\r\n            <>\r\n                <TypeChoice type={this.state.chosenRendererType} onChange={this.handleRenererTypeChange} />\r\n                <div className=\"Grid ag-theme-balham\">\r\n                    <AgGridReact gridOptions={this.state.gridOptions} />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\nimport './App.css';\n\nimport Grid from './grid/Grid';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Grid />\n            <div className=\"about\">\n                Example app for <a href=\"https://morzel.net\">morzel.net</a> blog post / <span class=\"warning\">WORK IN PROGRESS!</span>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}