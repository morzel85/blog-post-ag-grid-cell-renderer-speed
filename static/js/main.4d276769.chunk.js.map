{"version":3,"sources":["grid/generator.js","grid/renderers/vanillaFunctionRenderer.js","grid/renderers/ReactClassRenderer.js","grid/renderers/ReactFunctionRenderer.js","grid/RendererTypeChoice.js","grid/StaticMarkupChoice.js","grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["generateColumnsAndRows","columnsPerTypeCount","rowsCount","columnDefs","rowData","i","push","field","headerName","cellRenderer","hide","r","row","id","c","text","vanillaFunctionRenderer","params","value","ReactClassRenderer","this","props","Component","ReactFunctionRenderer","RendererTypeChoice","className","type","name","onChange","defaultChecked","StaticMarkupChoice","checked","disableStaticMarkup","Grid","setColumnsVisiblity","rendererType","allColumns","gridColumnApi","getAllColumns","columnsToHide","filter","colDef","columnsToShow","setColumnsVisible","handleGridReady","columnApi","handleRendererTypeChange","event","target","undefined","handleDisableStaticMarkupOptionChange","setState","state","defaultColDef","width","components","vanillaFunction","frameworkComponents","reactClass","reactFunction","onGridReady","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d276769.chunk.js","sourcesContent":["const generateColumnsAndRows = (columnsPerTypeCount, rowsCount) => {\r\n    const columnDefs = [];\r\n    const rowData = [];\r\n\r\n    for (let i = 0; i < columnsPerTypeCount; i++) {\r\n        columnDefs.push({\r\n            field: 'field_' + i,\r\n            headerName: 'Col ' + i\r\n        }, {\r\n            field: 'field_vf_' + i,\r\n            headerName: 'Col VF ' + i,\r\n            cellRenderer: 'vanillaFunction',\r\n            hide: true\r\n        }, {\r\n            field: 'field_rc_' + i,\r\n            headerName: 'Col RC ' + i,\r\n            cellRenderer: 'reactClass',\r\n            hide: true\r\n        }, {\r\n            field: 'field_rf_' + i,\r\n            headerName: 'Col RF ' + i,\r\n            cellRenderer: 'reactFunction',\r\n            hide: true\r\n        });\r\n    }\r\n\r\n    for (let r = 0; r < rowsCount; r++) {\r\n        const row = { id: r };\r\n\r\n        for (let c = 0; c < columnsPerTypeCount; c++) {\r\n            const text = `(${r}, ${c})`;\r\n            row['field_' + c] = text;\r\n            row['field_vf_' + c] = text;\r\n            row['field_rc_' + c] = text;\r\n            row['field_rf_' + c] = text;\r\n        }\r\n\r\n        rowData.push(row);\r\n    }\r\n\r\n    return [columnDefs, rowData];\r\n}\r\n\r\nexport default generateColumnsAndRows;\r\n","export default function vanillaFunctionRenderer(params) {\r\n    return `<span>VF: ${params.value}</span>`;\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ReactClassRenderer extends Component {\r\n    render() {\r\n        return (\r\n            <span>RC: {this.props.value}</span>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function ReactFunctionRenderer(props) {\r\n    return (\r\n        <span>RF: {props.value}</span>\r\n    );\r\n}","import React from 'react';\r\n\r\nconst RendererTypeChoice = props => {\r\n    return (\r\n        <div className=\"RendererTypeChoice\">\r\n            <span>Cell renderer type:</span>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value=\"\"\r\n                    onChange={props.onChange} defaultChecked />\r\n                Not set\r\n             </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value=\"vanillaFunction\"\r\n                    onChange={props.onChange} />\r\n                Vanilla JS function\r\n            </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value=\"reactClass\"\r\n                    onChange={props.onChange} />\r\n                React class component\r\n            </label>\r\n            <label>\r\n                <input type=\"radio\" name=\"rendererType\" value=\"reactFunction\"\r\n                    onChange={props.onChange} />\r\n                React function component\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RendererTypeChoice;","import React from 'react';\r\n\r\nconst StaticMarkupChoice = props => {\r\n    return (\r\n        <div className=\"StaticMarkupChoice\">\r\n            <label>\r\n                <input type=\"checkbox\" name=\"disableStaticMarkup\"\r\n                    onChange={props.onChange} checked={props.disableStaticMarkup} />\r\n                disableStaticMarkup (grid option)\r\n             </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StaticMarkupChoice;","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\n\r\nimport generateColumnsAndRows from './generator';\r\n\r\nimport vanillaFunctionRenderer from './renderers/vanillaFunctionRenderer';\r\nimport ReactClassRenderer from './renderers/ReactClassRenderer';\r\nimport ReactFunctionRenderer from './renderers/ReactFunctionRenderer';\r\n\r\nimport RendererTypeChoice from './RendererTypeChoice';\r\nimport StaticMarkupChoice from './StaticMarkupChoice';\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const [columnDefs, rowData] = generateColumnsAndRows(100, 100);\r\n\r\n        this.state = {\r\n            columnDefs,\r\n            rowData,\r\n            disableStaticMarkup: false\r\n        }\r\n    }\r\n\r\n    setColumnsVisiblity = rendererType => {\r\n        const allColumns = this.gridColumnApi.getAllColumns();\r\n\r\n        const columnsToHide = allColumns.filter(c => c.colDef.cellRenderer !== rendererType);\r\n        const columnsToShow = allColumns.filter(c => c.colDef.cellRenderer === rendererType);\r\n\r\n        this.gridColumnApi.setColumnsVisible(columnsToHide, false);\r\n        this.gridColumnApi.setColumnsVisible(columnsToShow, true);\r\n    }\r\n\r\n    handleGridReady = params => {\r\n        this.gridColumnApi = params.columnApi;\r\n    }\r\n\r\n    handleRendererTypeChange = event => {\r\n        this.setColumnsVisiblity(event.target.value || undefined);\r\n    }\r\n\r\n    handleDisableStaticMarkupOptionChange = event => {\r\n        this.setState({\r\n            disableStaticMarkup: event.target.checked\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"settings\">\r\n                    <RendererTypeChoice\r\n                        type={this.state.rendererType}\r\n                        onChange={this.handleRendererTypeChange} />\r\n                    <StaticMarkupChoice\r\n                        type={this.state.disableStaticMarkup}\r\n                        onChange={this.handleDisableStaticMarkupOptionChange} />\r\n                </div>\r\n                <div className=\"ag-theme-balham\">\r\n                    <AgGridReact\r\n                        defaultColDef={{\r\n                            width: 90\r\n                        }}\r\n                        components={{\r\n                            vanillaFunction: vanillaFunctionRenderer\r\n                        }}\r\n                        frameworkComponents={{\r\n                            reactClass: ReactClassRenderer,\r\n                            reactFunction: ReactFunctionRenderer\r\n                        }}\r\n                        columnDefs={this.state.columnDefs}\r\n                        rowData={this.state.rowData}\r\n                        disableStaticMarkup={this.state.disableStaticMarkup}\r\n                        onGridReady={this.handleGridReady}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Grid from './grid/Grid';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Grid />\r\n            <div className=\"about\">\r\n                Example app for <a href=\"https://morzel.net\">morzel.net</a> blog post\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}